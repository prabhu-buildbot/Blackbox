{"version":3,"sources":["../../../src/modules/gps/gps.ts"],"sourcesContent":["\r\nimport { SerialPort } from 'serialport'\r\nimport { ReadlineParser } from '@serialport/parser-readline'\r\n\r\nimport { log as gpsLog } from \"@utils/logger\";\r\n\r\nimport { LOCATION_UPDATE_RATE, GPS_PROCESS_SPEED, GPS_PORT, GPS_BAUDRATE, GPS_LATITUDE_OFFSET, GPS_LONGITUDE_OFFSET } from \"@config\";\r\n\r\nconst GPS_PARSER = require('gps');\r\n\r\nconst defaultInvalidGpsData = {valid: false, timedate: '', latitude: null, longitude: null, speed: 0, track: 0 };\r\n\r\nlet serialPort = null;\r\n\r\nlet currentGPSData = defaultInvalidGpsData;\r\nlet gpsPortState = false;\r\n\r\nlet socketIO = null;\r\nlet webAppUpdateRate = 1000;\r\nlet gpsProcessSpeed = 2;\r\n\r\nfunction setGpsPortState (state)\r\n{\r\n    gpsPortState = state;\r\n}\r\n\r\nconst showData = dataString => {\r\n\r\n   log(dataString);\r\n\r\n}\r\n\r\nfunction log (message)\r\n{\r\n    gpsLog('gps > ' + message);\r\n}\r\n\r\nfunction gpsPortSetup (serverSocketIO)\r\n{\r\n\r\n    currentGPSData = defaultInvalidGpsData;\r\n    socketIO = serverSocketIO;\r\n\r\n    webAppUpdateRate = LOCATION_UPDATE_RATE;\r\n    gpsProcessSpeed = GPS_PROCESS_SPEED;\r\n\r\n    log('Web App update rate: ' + webAppUpdateRate + ' ms');\r\n    log('GPS processing limit speed: ' + gpsProcessSpeed + ' kmh');\r\n\r\n    // setup port\r\n    try {\r\n\r\n      log('Opening gps port: ' + GPS_PORT + ' @ baudrate: ' + GPS_BAUDRATE);\r\n\r\n      const readlineParser = new ReadlineParser()\r\n        readlineParser.on('data', gpsDataReceived)\r\n\r\n      serialPort = new SerialPort({path: GPS_PORT, baudRate: GPS_BAUDRATE, autoOpen: false, })\r\n        serialPort.pipe(readlineParser)\r\n\r\n      serialPort.on('error', function(error) {\r\n        log('Error on gps port - ' + error.message);\r\n      })\r\n\r\n      // open the port\r\n      serialPort.open(function (error) {\r\n\r\n        if (error) {\r\n            setGpsPortState(false);\r\n            log('Error opening gps port: ' + error.message);\r\n        }\r\n        else {\r\n            setGpsPortState(true);\r\n            log('gps port opened');\r\n        }\r\n      })\r\n\r\n    }\r\n    catch (error) {\r\n      log('Error Opening Serial Port: gps\\n Error: ' + error);\r\n    }\r\n\r\n    // setup timer to update web app\r\n    if (webAppUpdateRate > 0) {\r\n        setInterval(() => {\r\n          updateWebApp()\r\n        }, webAppUpdateRate);\r\n\r\n    }\r\n\r\n}\r\n\r\nfunction updateWebApp()\r\n{\r\n\r\n    //if (gpsData.valid === false)\r\n    //    log('invalid location reading');\r\n\r\n    //if (gpsData.speed <= gpsProcessSpeed)\r\n    //    log('invalid speed: ' + gpsData.speed + ' vs ' + gpsProcessSpeed);\r\n\r\n    // log(JSON.stringify(gpsData));\r\n\r\n    //if (gpsData.valid === true && gpsData.speed > gpsProcessSpeed)\r\n    if (gpsPortState === true)\r\n        socketIO.emit('gps', currentGPSData)\r\n\r\n}\r\n\r\nconst gpsDataReceived = gpsString => {\r\n\r\n\r\n    // log('gps string: ' + gpsString);\r\n\r\n    if (gpsString.includes('$GNRMC') === true || gpsString.includes('$GPRMC') === true) {\r\n\r\n        // { time: 2023-08-01T14:36:38.085Z, status: 'void', lat: null, lon: null, speed: 0, track: 0, variation: null,\r\n        //   faa: 'not valid', navStatus: null, raw: '$GNRMC,143638.085,V,,,,,0.00,0.00,010823,,,N*5D\\r', valid: true, type: 'RMC'\r\n        // }\r\n        //log(gpsString);\r\n\r\n        const parsedData = GPS_PARSER.Parse(gpsString);\r\n\r\n        currentGPSData = {valid: parsedData.valid, timedate: parsedData.time,\r\n                          latitude: parsedData.lat + GPS_LATITUDE_OFFSET, longitude: parsedData.lon + GPS_LONGITUDE_OFFSET,\r\n                          speed: parsedData.speed, track: parsedData.track};\r\n\r\n    }\r\n\r\n};\r\n\r\n\r\nexport {gpsPortSetup, gpsPortState, setGpsPortState, defaultInvalidGpsData, currentGPSData };"],"names":["gpsPortSetup","gpsPortState","setGpsPortState","defaultInvalidGpsData","currentGPSData","GPS_PARSER","require","valid","timedate","latitude","longitude","speed","track","serialPort","socketIO","webAppUpdateRate","gpsProcessSpeed","state","showData","dataString","log","message","gpsLog","serverSocketIO","LOCATION_UPDATE_RATE","GPS_PROCESS_SPEED","GPS_PORT","GPS_BAUDRATE","readlineParser","ReadlineParser","on","gpsDataReceived","SerialPort","path","baudRate","autoOpen","pipe","error","open","setInterval","updateWebApp","emit","gpsString","includes","parsedData","Parse","time","lat","GPS_LATITUDE_OFFSET","lon","GPS_LONGITUDE_OFFSET"],"mappings":";;;;;;;;;;;IAoIQA,YAAY;eAAZA;;IAAcC,YAAY;eAAZA;;IAAcC,eAAe;eAAfA;;IAAiBC,qBAAqB;eAArBA;;IAAuBC,cAAc;eAAdA;;;0BAnIjD;8BACI;sBAED;sBAE6F;AAE3H,IAAMC,aAAaC,QAAQ;AAE3B,IAAMH,wBAAwB;IAACI,OAAO;IAAOC,UAAU;IAAIC,UAAU;IAAMC,WAAW;IAAMC,OAAO;IAAGC,OAAO;AAAE;AAE/G,IAAIC,aAAa;AAEjB,IAAIT,iBAAiBD;AACrB,IAAIF,eAAe;AAEnB,IAAIa,WAAW;AACf,IAAIC,mBAAmB;AACvB,IAAIC,kBAAkB;AAEtB,SAASd,gBAAiBe,KAAK;IAE3BhB,eAAegB;AACnB;AAEA,IAAMC,WAAWC,SAAAA;IAEdC,IAAID;AAEP;AAEA,SAASC,IAAKC,OAAO;IAEjBC,IAAAA,WAAM,EAAC,WAAWD;AACtB;AAEA,SAASrB,aAAcuB,cAAc;IAGjCnB,iBAAiBD;IACjBW,WAAWS;IAEXR,mBAAmBS,4BAAoB;IACvCR,kBAAkBS,yBAAiB;IAEnCL,IAAI,0BAA0BL,mBAAmB;IACjDK,IAAI,iCAAiCJ,kBAAkB;IAGvD,IAAI;QAEFI,IAAI,uBAAuBM,gBAAQ,GAAG,kBAAkBC,oBAAY;QAEpE,IAAMC,iBAAiB,IAAIC,8BAAc;QACvCD,eAAeE,EAAE,CAAC,QAAQC;QAE5BlB,aAAa,IAAImB,sBAAU,CAAC;YAACC,MAAMP,gBAAQ;YAAEQ,UAAUP,oBAAY;YAAEQ,UAAU;QAAO;QACpFtB,WAAWuB,IAAI,CAACR;QAElBf,WAAWiB,EAAE,CAAC,SAAS,SAASO,KAAK;YACnCjB,IAAI,yBAAyBiB,MAAMhB,OAAO;QAC5C;QAGAR,WAAWyB,IAAI,CAAC,SAAUD,KAAK;YAE7B,IAAIA,OAAO;gBACPnC,gBAAgB;gBAChBkB,IAAI,6BAA6BiB,MAAMhB,OAAO;YAClD,OACK;gBACDnB,gBAAgB;gBAChBkB,IAAI;YACR;QACF;IAEF,EACA,OAAOiB,OAAO;QACZjB,IAAI,6CAA6CiB;IACnD;IAGA,IAAItB,mBAAmB,GAAG;QACtBwB,YAAY;YACVC;QACF,GAAGzB;IAEP;AAEJ;AAEA,SAASyB;IAYL,IAAIvC,iBAAiB,MACjBa,SAAS2B,IAAI,CAAC,OAAOrC;AAE7B;AAEA,IAAM2B,kBAAkBW,SAAAA;IAKpB,IAAIA,UAAUC,QAAQ,CAAC,cAAc,QAAQD,UAAUC,QAAQ,CAAC,cAAc,MAAM;QAOhF,IAAMC,aAAavC,WAAWwC,KAAK,CAACH;QAEpCtC,iBAAiB;YAACG,OAAOqC,WAAWrC,KAAK;YAAEC,UAAUoC,WAAWE,IAAI;YAClDrC,UAAUmC,WAAWG,GAAG,GAAGC,2BAAmB;YAAEtC,WAAWkC,WAAWK,GAAG,GAAGC,4BAAoB;YAChGvC,OAAOiC,WAAWjC,KAAK;YAAEC,OAAOgC,WAAWhC,KAAK;QAAA;IAEtE;AAEJ"}