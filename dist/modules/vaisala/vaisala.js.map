{"version":3,"sources":["../../../src/modules/vaisala/vaisala.ts"],"sourcesContent":["\r\nimport { SerialPort } from 'serialport'\r\nimport { ReadlineParser } from '@serialport/parser-readline'\r\n\r\nimport { log as vaisalaLog } from \"@utils/logger\";\r\n\r\nimport { USING_METRIC, VAISALA_PORT, VAISALA_BAUDRATE, INVALID_TEMPERATURE} from \"@config\";\r\n\r\nlet serialPort = null;\r\n\r\nconst UNSET_VALUE = -1;\r\n\r\nlet ambientTemperature = INVALID_TEMPERATURE;\r\nlet vaisalaPortState = false;\r\n\r\nlet socketIO = null;\r\n\r\nfunction setVaisalaPortState (state)\r\n{\r\n    vaisalaPortState = state;\r\n}\r\n\r\nfunction log (message)\r\n{\r\n    vaisalaLog('vaisala > ' + message);\r\n}\r\n\r\nfunction vaisalaPortSetup (serverSocketIO)\r\n{\r\n\r\n    ambientTemperature = INVALID_TEMPERATURE;\r\n    socketIO = serverSocketIO;\r\n\r\n    // setup port\r\n    try {\r\n\r\n      log('Opening vaisala port: ' + VAISALA_PORT + ' @ baudrate: ' + VAISALA_BAUDRATE);\r\n\r\n      const readlineParser = new ReadlineParser()\r\n        readlineParser.on('data', vaisalaDataReceived)\r\n\r\n      serialPort = new SerialPort({path: VAISALA_PORT, baudRate: VAISALA_BAUDRATE, autoOpen: false, })\r\n        serialPort.pipe(readlineParser)\r\n\r\n      serialPort.on('error', function(error) {\r\n        log('Error on vaisala port - ' + error.message);\r\n      })\r\n\r\n      // open the port\r\n      serialPort.open(function (error) {\r\n\r\n        if (error) {\r\n            setVaisalaPortState(false);\r\n            log('Error opening vaisala port: ' + error.message);\r\n        }\r\n        else {\r\n            setVaisalaPortState(true);\r\n            log('vaisala port opened');\r\n        }\r\n      })\r\n\r\n    }\r\n    catch (error) {\r\n      log('Error Opening Serial Port: vaisala\\n Error: ' + error);\r\n    }\r\n\r\n\r\n}\r\n\r\n// function updateWebApp()\r\n// {\r\n//     if (vaisalaPortState === true)\r\n//         socketIO.emit('vaisala', ambientTemperature)\r\n// }\r\n\r\nconst vaisalaDataReceived = vaisalaString => {\r\n\r\n\r\n    // log('vaisala string: ' + vaisalaString);\r\n\r\n    // 'F+056.8,+044.4' OR 'C-008.0,+001.1'\r\n\r\n    try {\r\n\r\n      const isCelciusReading = (vaisalaString.toLowerCase().indexOf(\"c\") > UNSET_VALUE);\r\n      const rawNumbers = vaisalaString.substring(1).split(',');\r\n\r\n      //tempNumber = parseFloat(rawNumbers[0]);\r\n      //if (isNaN(tempNumber) === false)\r\n      //    surfaceTemperature = tempNumber;\r\n\r\n      const tempNumber = parseFloat(rawNumbers[0]);\r\n      if (isNaN(tempNumber) === false)\r\n          ambientTemperature = tempNumber;\r\n\r\n      // convert units, if required\r\n      if (USING_METRIC === true) {  // want celcius\r\n\r\n          if (isCelciusReading === false) // needs converting to Celcius\r\n              ambientTemperature = fahrenheitToCelcius(ambientTemperature);\r\n      }\r\n      else { // want fahrenheit\r\n\r\n          if (isCelciusReading == true) // needs converting to fahrenheit\r\n              ambientTemperature = celciusToFahrenheit(ambientTemperature);\r\n      }\r\n\r\n    }\r\n    catch {\r\n      ambientTemperature = INVALID_TEMPERATURE;\r\n    }\r\n\r\n};\r\n\r\nfunction fahrenheitToCelcius (fahrenheitTemperature)\r\n{\r\n   return ((fahrenheitTemperature - 32) * 5 / 9);\r\n}\r\n\r\nfunction celciusToFahrenheit (celciusTemperature)\r\n{\r\n   return ((celciusTemperature * 9 / 5) + 32);\r\n}\r\n\r\n\r\nexport {vaisalaPortSetup, vaisalaPortState, setVaisalaPortState, ambientTemperature };"],"names":["vaisalaPortSetup","vaisalaPortState","setVaisalaPortState","ambientTemperature","serialPort","UNSET_VALUE","INVALID_TEMPERATURE","socketIO","state","log","message","vaisalaLog","serverSocketIO","VAISALA_PORT","VAISALA_BAUDRATE","readlineParser","ReadlineParser","on","vaisalaDataReceived","SerialPort","path","baudRate","autoOpen","pipe","error","open","vaisalaString","isCelciusReading","toLowerCase","indexOf","rawNumbers","substring","split","tempNumber","parseFloat","isNaN","USING_METRIC","fahrenheitToCelcius","celciusToFahrenheit","fahrenheitTemperature","celciusTemperature"],"mappings":";;;;;;;;;;;IA6HQA,gBAAgB;eAAhBA;;IAAkBC,gBAAgB;eAAhBA;;IAAkBC,mBAAmB;eAAnBA;;IAAqBC,kBAAkB;eAAlBA;;;0BA5HtC;8BACI;sBAEG;sBAE+C;AAEjF,IAAIC,aAAa;AAEjB,IAAMC,cAAc,CAAC;AAErB,IAAIF,qBAAqBG,2BAAmB;AAC5C,IAAIL,mBAAmB;AAEvB,IAAIM,WAAW;AAEf,SAASL,oBAAqBM,KAAK;IAE/BP,mBAAmBO;AACvB;AAEA,SAASC,IAAKC,OAAO;IAEjBC,IAAAA,WAAU,EAAC,eAAeD;AAC9B;AAEA,SAASV,iBAAkBY,cAAc;IAGrCT,qBAAqBG,2BAAmB;IACxCC,WAAWK;IAGX,IAAI;QAEFH,IAAI,2BAA2BI,oBAAY,GAAG,kBAAkBC,wBAAgB;QAEhF,IAAMC,iBAAiB,IAAIC,8BAAc;QACvCD,eAAeE,EAAE,CAAC,QAAQC;QAE5Bd,aAAa,IAAIe,sBAAU,CAAC;YAACC,MAAMP,oBAAY;YAAEQ,UAAUP,wBAAgB;YAAEQ,UAAU;QAAO;QAC5FlB,WAAWmB,IAAI,CAACR;QAElBX,WAAWa,EAAE,CAAC,SAAS,SAASO,KAAK;YACnCf,IAAI,6BAA6Be,MAAMd,OAAO;QAChD;QAGAN,WAAWqB,IAAI,CAAC,SAAUD,KAAK;YAE7B,IAAIA,OAAO;gBACPtB,oBAAoB;gBACpBO,IAAI,iCAAiCe,MAAMd,OAAO;YACtD,OACK;gBACDR,oBAAoB;gBACpBO,IAAI;YACR;QACF;IAEF,EACA,OAAOe,OAAO;QACZf,IAAI,iDAAiDe;IACvD;AAGJ;AAQA,IAAMN,sBAAsBQ,SAAAA;IAOxB,IAAI;QAEF,IAAMC,mBAAoBD,cAAcE,WAAW,GAAGC,OAAO,CAAC,OAAOxB;QACrE,IAAMyB,aAAaJ,cAAcK,SAAS,CAAC,GAAGC,KAAK,CAAC;QAMpD,IAAMC,aAAaC,WAAWJ,UAAU,CAAC,EAAE;QAC3C,IAAIK,MAAMF,gBAAgB,OACtB9B,qBAAqB8B;QAGzB,IAAIG,oBAAY,KAAK,MAAM;YAEvB,IAAIT,qBAAqB,OACrBxB,qBAAqBkC,oBAAoBlC;QACjD,OACK;YAED,IAAIwB,oBAAoB,MACpBxB,qBAAqBmC,oBAAoBnC;QACjD;IAEF,EACA,UAAM;QACJA,qBAAqBG,2BAAmB;IAC1C;AAEJ;AAEA,SAAS+B,oBAAqBE,qBAAqB;IAEhD,OAAQ,AAACA,CAAAA,wBAAwB,EAAC,IAAK,IAAI;AAC9C;AAEA,SAASD,oBAAqBE,kBAAkB;IAE7C,OAAQ,AAACA,qBAAqB,IAAI,IAAK;AAC1C"}