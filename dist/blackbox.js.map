{"version":3,"sources":["../src/blackbox.ts"],"sourcesContent":["\r\nimport { SerialPort } from 'serialport'\r\nimport { Server } from \"socket.io\";\r\n\r\nimport { gpsPortSetup, gpsPortState } from \"./modules/gps/gps\";\r\nimport { bowmonkPortSetup, bowmonkPortState } from \"./modules/bowmonk/bowmonk\";\r\nimport { vaisalaPortSetup, vaisalaPortState } from \"./modules/vaisala/vaisala\";\r\n// import bowmonkRoutes from \"./modules/bowmonk/bowmonkRoutes\r\n\r\n\r\n\r\n// import compression from \"compression\";\r\n// import cookieParser from \"cookie-parser\";\r\n// import cors from \"cors\";\r\n// import helmet from \"helmet\";\r\n// import hpp from \"hpp\";\r\n// import morgan from \"morgan\";\r\n\r\nimport * as http from \"http\";\r\n\r\nimport express from \"express\";\r\n\r\nimport { LOG_DIRECTORY, LOG_FORMAT, NODE_ENVIRONMENT, SERVER_PORT, AIRPORT_CODE, GPS_PORT, GPS_BAUDRATE, BOWMONK_PORT, BOWMONK_BAUDRATE, setupConfiguration, VAISALA_PORT } from \"./config/index\";\r\nimport {BOWMONK_PORT as bowmonkport} from \"./config/index\";\r\n\r\nimport { log as serverLog, setupLogging } from \"@utils/logger\";\r\n\r\nimport gpsRoutes from \"./modules/gps/gpsRoutes\";\r\nimport bowmonkRoutes from \"./modules/bowmonk/bowmonkRoutes\";\r\nimport vaisalaRoutes from \"./modules/vaisala/vaisalaRoutes\";\r\n\r\nconst UNSET_VALUE = -1;\r\n\r\nconst softwareVersion = '1.0.2';\r\n\r\nconst nodeEnvironment = NODE_ENVIRONMENT || \"production\";\r\nconst serverPort = SERVER_PORT || 3000;\r\n\r\n\r\nfunction log (message)\r\n{\r\n    serverLog(message);\r\n}\r\nconsole.log(\":::::::::BOWMONK_PORT\", bowmonkport)\r\nconsole.log(\":::::::::GPS_PORT\", GPS_PORT)\r\nconsole.log(\":::::::::VAISALA_PORT\", VAISALA_PORT)\r\n\r\n\r\n\r\n\r\nconst expressApp = express();\r\n\r\n// express middleware\r\n//   expressApp.use(morgan(LOG_FORMAT, { stream }));\r\n//   expressApp.use(cors());\r\n//   expressApp.use(hpp());\r\n//   expressApp.use(helmet());\r\n//   expressApp.use(compression());\r\n//   expressApp.use(express.json({ limit: \"50mb\" }));\r\n//   expressApp.use(cookieParser());\r\n\r\nexpressApp.use(express.json({ limit: \"1mb\" }));\r\nexpressApp.use(express.urlencoded({ extended: true }));\r\n\r\nexpressApp.use((req, res, next) => {\r\n  res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\r\n  res.setHeader(\"Access-Control-Allow-Methods\", \"GET,PUT,POST,PATCH,DELETE,OPTIONS\");\r\n  res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type, x-client, x-auth, Access-Control-Allow-Headers, Authorization, X-Requested-With\");\r\n  next();\r\n});\r\n\r\n// routes\r\nexpressApp.use(\"/api/gps\", gpsRoutes);\r\nexpressApp.use(\"/api/bowmonk\", bowmonkRoutes);\r\nexpressApp.use(\"/api/vaisala\", vaisalaRoutes);\r\n\r\n// if it gets here, the previous routings didn't handle the request, so error 404\r\nexpressApp.use((request, result, next) => {\r\n    log('Unhandled Request: ' + request.url + ' ' + request.method);\r\n    result.status(404).send('Request not found')\r\n})\r\n\r\n\r\nasync function availableSerialPorts()\r\n{\r\n    // add list of COM ports to the log\r\n    let portList = \"\";\r\n\r\n    const availablePorts = await SerialPort.list();\r\n     availablePorts.forEach(port => portList += port.path + ', ');\r\n\r\n   return((portList.length > 0) ? portList.substring(0, portList.length-2): 'No Ports Found');\r\n\r\n}\r\n\r\nasync function StartServer ()\r\n{\r\n\r\n        // setup logging and start server\r\n        if (setupLogging(LOG_DIRECTORY) === true) {\r\n\r\n            log('');\r\n            log('Blackbox API starting ...');\r\n            log('- version: ' + softwareVersion);\r\n            log('- using NODE_ENVIRONMENT: ' + nodeEnvironment);\r\n            log('');\r\n\r\n            // load configuration\r\n            await setupConfiguration();\r\n\r\n            // setup http server and socket communications\r\n            const httpServer = http.createServer(expressApp);\r\n\r\n            //const socketIO = new Server(httpServer,  { cors: { origin: (environment === 'development') ? '*': ['http://localhost:' + serverPort] }, } ); // only allow local communications for production\r\n            const socketIO = new Server(httpServer,  { cors: { origin: '*'} });\r\n            expressApp.set('socketio', socketIO)\r\n\r\n            socketIO.on('connection', (socket) => {\r\n\r\n              log('socketIO - a user connected')\r\n\r\n              socket.on('disconnect', () => {\r\n                log('socketIO - user disconnected');\r\n              })\r\n\r\n              socket.on(\"connect_error\", (error) => {\r\n                log('socketIO - connect_error due to: ' + error.message + ', ' + error);\r\n              });\r\n\r\n              socket.on('join', (airportCode) => {\r\n                log('socketIO - request to join room')\r\n                socket.join(airportCode)\r\n              })\r\n            })\r\n\r\n            // starting http server\r\n            httpServer.listen(serverPort, async () => {\r\n\r\n              // log('- available COM Ports: ' + await availableSerialPorts());\r\n              log('- listening on server port: ' + serverPort);\r\n              log('');\r\n\r\n              // setup gps\r\n              // let gpsSetupInterval:ReturnType<typeof setInterval> = null;\r\n              // gpsSetupInterval = setInterval(() => {\r\n              //                       if ((gpsPortState === true) && (gpsSetupInterval !== null)) {\r\n              //                           clearInterval(gpsSetupInterval);\r\n              //                           log('gps - cancelling port open interval');\r\n              //                       }\r\n              //                       else\r\n              //                           gpsPortSetup(socketIO);\r\n              //                    }, 2000);\r\n\r\n              // setup bowmonk\r\n              let bowmonkSetupInterval:ReturnType<typeof setInterval> = null;\r\n              bowmonkSetupInterval = setInterval(() => {\r\n                                        if ((bowmonkPortState === true) && (bowmonkSetupInterval !== null)) {\r\n                                            clearInterval(bowmonkSetupInterval);\r\n                                            log('bowmonk - cancelling port open interval');\r\n                                        }\r\n                                        else\r\n                                            bowmonkPortSetup(socketIO);\r\n                                     }, 2000);\r\n\r\n              // setup vaisala\r\n              // let vaisalaSetupInterval:ReturnType<typeof setInterval> = null;\r\n              // vaisalaSetupInterval = setInterval(() => {\r\n              //                           if ((vaisalaPortState === true) && (vaisalaSetupInterval !== null)) {\r\n              //                               clearInterval(vaisalaSetupInterval);\r\n              //                               log('vaisala - cancelling port open interval');\r\n              //                           }\r\n              //                           else\r\n              //                               vaisalaPortSetup(socketIO)\r\n              //                        }, 2000);\r\n\r\n            });\r\n        }\r\n        else\r\n            console.log('Error initializing logger\\n');\r\n\r\n}\r\n\r\nStartServer();\r\n"],"names":["UNSET_VALUE","softwareVersion","nodeEnvironment","NODE_ENVIRONMENT","serverPort","SERVER_PORT","log","message","serverLog","console","bowmonkport","GPS_PORT","VAISALA_PORT","expressApp","express","use","json","limit","urlencoded","extended","req","res","next","setHeader","gpsRoutes","bowmonkRoutes","vaisalaRoutes","request","result","url","method","status","send","availableSerialPorts","portList","availablePorts","SerialPort","list","forEach","port","path","length","substring","StartServer","httpServer","socketIO","setupLogging","LOG_DIRECTORY","setupConfiguration","http","createServer","Server","cors","origin","set","on","socket","error","airportCode","join","listen","bowmonkSetupInterval","setInterval","bowmonkPortState","clearInterval","bowmonkPortSetup"],"mappings":"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"}