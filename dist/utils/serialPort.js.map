{"version":3,"sources":["../../src/utils/serialPort.ts"],"sourcesContent":["\r\nimport { SerialPort } from 'serialport'\r\nimport { ReadlineParser } from '@serialport/parser-readline'\r\n\r\nimport { log as serialPortLog } from \"@utils/logger\";\r\n\r\n\r\nlet logSource = 'serialPort';\r\nlet serialPort = null;\r\n\r\nfunction log (message)\r\n{\r\n    serialPortLog(logSource + ' > ' + message);\r\n}\r\n\r\n\r\n\r\nconst showData = dataString => {\r\n\r\n    // log('in here');\r\n    log(dataString);\r\n\r\n}\r\n\r\n\r\nfunction serialPortSetup (source, port, baudrate, setPortState, dataReceived)\r\n{\r\n\r\n    logSource = source;\r\n\r\n    try {\r\n\r\n      // setup port\r\n      log('Opening ' + source + ' port: ' + port + ' @ baudrate: ' + baudrate);\r\n\r\n/*\r\n      serialPort = new SerialPort({path: port, baudRate: baudrate, autoOpen: true, })\r\n\r\n      serialPort.on(\"open\", function () {\r\n\r\n        log('port open');\r\n\r\n      });\r\n\r\n      serialPort.on('data', function (data) {\r\n        //const daten=data.toString('hex');\r\n        log(data);\r\n     });\r\n*/\r\n\r\n\r\n      const readlineParser = new ReadlineParser()\r\n       readlineParser.on('data', dataReceived)\r\n       // readlineParser.on('data', showData)\r\n\r\n      serialPort = new SerialPort({path: port, baudRate: baudrate, autoOpen: false, })\r\n       serialPort.pipe(readlineParser)\r\n\r\n      // open the port\r\n      serialPort.open(function (error) {\r\n\r\n        if (error) {\r\n            setPortState(false);\r\n            log(error.message);\r\n        }\r\n        else {\r\n            setPortState(true);\r\n            log(source + ' port opened');\r\n        }\r\n      })\r\n\r\n      serialPort.on('error', function(error) {\r\n         log('Error on ' + source + ' port');\r\n         log(' - ' + error.message);\r\n      })\r\n\r\n    }\r\n    catch (error) {\r\n      log('Error Opening Serial Port: ' + source + '\\n Error: ' + error);\r\n    }\r\n\r\n}\r\n\r\nexport {serialPortSetup};"],"names":["serialPortSetup","logSource","serialPort","log","message","serialPortLog","showData","dataString","source","port","baudrate","setPortState","dataReceived","readlineParser","ReadlineParser","on","SerialPort","path","baudRate","autoOpen","pipe","open","error"],"mappings":";;;;+BAmFQA;;;eAAAA;;;0BAlFmB;8BACI;sBAEM;AAGrC,IAAIC,YAAY;AAChB,IAAIC,aAAa;AAEjB,SAASC,IAAKC,OAAO;IAEjBC,IAAAA,WAAa,EAACJ,YAAY,QAAQG;AACtC;AAIA,IAAME,WAAWC,SAAAA;IAGbJ,IAAII;AAER;AAGA,SAASP,gBAAiBQ,MAAM,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,YAAY;IAGxEX,YAAYO;IAEZ,IAAI;QAGFL,IAAI,aAAaK,SAAS,YAAYC,OAAO,kBAAkBC;QAkB/D,IAAMG,iBAAiB,IAAIC,8BAAc;QACxCD,eAAeE,EAAE,CAAC,QAAQH;QAG3BV,aAAa,IAAIc,sBAAU,CAAC;YAACC,MAAMR;YAAMS,UAAUR;YAAUS,UAAU;QAAO;QAC7EjB,WAAWkB,IAAI,CAACP;QAGjBX,WAAWmB,IAAI,CAAC,SAAUC,KAAK;YAE7B,IAAIA,OAAO;gBACPX,aAAa;gBACbR,IAAImB,MAAMlB,OAAO;YACrB,OACK;gBACDO,aAAa;gBACbR,IAAIK,SAAS;YACjB;QACF;QAEAN,WAAWa,EAAE,CAAC,SAAS,SAASO,KAAK;YAClCnB,IAAI,cAAcK,SAAS;YAC3BL,IAAI,QAAQmB,MAAMlB,OAAO;QAC5B;IAEF,EACA,OAAOkB,OAAO;QACZnB,IAAI,gCAAgCK,SAAS,eAAec;IAC9D;AAEJ"}