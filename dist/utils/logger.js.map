{"version":3,"sources":["../../src/utils/logger.ts"],"sourcesContent":["\r\nimport winston from \"winston\";\r\nimport DailyRotateFile from \"winston-daily-rotate-file\";\r\n\r\nimport { existsSync, mkdirSync } from \"fs\";\r\n// import { join } from \"path\";\r\n\r\nlet logger = null;\r\n\r\nfunction setupLogging(logDirectory)\r\n{\r\n\r\n    try {\r\n\r\n      if (existsSync(logDirectory) === false)\r\n          mkdirSync(logDirectory);\r\n\r\n    }\r\n    catch (error) {\r\n      console.log('\\nError creating log folder at: ', logDirectory);\r\n      console.log('Error: ', error);\r\n      return(false);\r\n    }\r\n\r\n    try {\r\n\r\n      const loggingFormat = winston.format.printf(({ timestamp, message }) => `${timestamp} >> ${message}`);\r\n\r\n      // Log Level - error: 0, warn: 1, info: 2, http: 3, verbose: 4, debug: 5, silly: 6\r\n      logger = winston.createLogger({\r\n\r\n        format: winston.format.combine(winston.format.timestamp({format: \"HH:mm:ss\", }), loggingFormat),\r\n        transports: [ new DailyRotateFile({level: \"info\",  datePattern: \"DD-MM-YYYY\",  dirname: logDirectory, filename: `%DATE%_bbLog`, extension: '.txt', json: false, }),\r\n                      new DailyRotateFile({level: \"error\", datePattern: \"DD-MM-YYYY\",  dirname: logDirectory, filename: `%DATE%_bbLog`, extension: '.txt', handleExceptions: true, json: false }),\r\n                    ],\r\n\r\n      });\r\n\r\n    }\r\n    catch (error) {\r\n      console.log('\\nError creating logger: ', error);\r\n      return(false);\r\n    }\r\n\r\n\r\n    try {\r\n\r\n      //if (process.env.NODE_ENVIRONMENT === \"development\")\r\n          logger.add(new winston.transports.Console({ format: winston.format.combine(winston.format.splat(), winston.format.colorize()), }));\r\n\r\n    }\r\n    catch (error) {\r\n      console.log('\\nError adding console transport to logger: ', error);\r\n      return(false);\r\n    }\r\n\r\n   return(true);\r\n\r\n}\r\n\r\n// const stream = {\r\n//   write: (message: string) => {\r\n//     //logger.info(message.substring(0, message.lastIndexOf(\"\\n\")));\r\n//     logger.info(message);\r\n//   },\r\n// };\r\n\r\n\r\nconst log = (message) => (logger !== null) ? logger.info(message):console.log(message); // log method called by everyone\r\n\r\n\r\nexport { log, setupLogging };\r\n"],"names":["log","setupLogging","logger","logDirectory","existsSync","mkdirSync","error","console","loggingFormat","winston","format","printf","timestamp","message","createLogger","combine","transports","DailyRotateFile","level","datePattern","dirname","filename","extension","json","handleExceptions","add","Console","splat","colorize","info"],"mappings":";;;;;;;;;;;IAuESA,GAAG;eAAHA;;IAAKC,YAAY;eAAZA;;;gDAtEM;+DACQ;kBAEU;;;;;;AAGtC,IAAIC,SAAS;AAEb,SAASD,aAAaE,YAAY;IAG9B,IAAI;QAEF,IAAIC,IAAAA,cAAU,EAACD,kBAAkB,OAC7BE,IAAAA,aAAS,EAACF;IAEhB,EACA,OAAOG,OAAO;QACZC,QAAQP,GAAG,CAAC,oCAAoCG;QAChDI,QAAQP,GAAG,CAAC,WAAWM;QACvB,OAAO;IACT;IAEA,IAAI;QAEF,IAAME,gBAAgBC,gBAAO,CAACC,MAAM,CAACC,MAAM,CAAC;gBAAGC,kBAAAA,WAAWC,gBAAAA;mBAAc,AAAC,GAAkBA,OAAhBD,WAAU,QAAc,OAARC;;QAG3FX,SAASO,gBAAO,CAACK,YAAY,CAAC;YAE5BJ,QAAQD,gBAAO,CAACC,MAAM,CAACK,OAAO,CAACN,gBAAO,CAACC,MAAM,CAACE,SAAS,CAAC;gBAACF,QAAQ;YAAY,IAAIF;YACjFQ,YAAY;gBAAE,IAAIC,+BAAe,CAAC;oBAACC,OAAO;oBAASC,aAAa;oBAAeC,SAASjB;oBAAckB,UAAW;oBAAeC,WAAW;oBAAQC,MAAM;gBAAO;gBAClJ,IAAIN,+BAAe,CAAC;oBAACC,OAAO;oBAASC,aAAa;oBAAeC,SAASjB;oBAAckB,UAAW;oBAAeC,WAAW;oBAAQE,kBAAkB;oBAAMD,MAAM;gBAAM;aAC1K;QAEf;IAEF,EACA,OAAOjB,OAAO;QACZC,QAAQP,GAAG,CAAC,6BAA6BM;QACzC,OAAO;IACT;IAGA,IAAI;QAGEJ,OAAOuB,GAAG,CAAC,IAAIhB,gBAAO,CAACO,UAAU,CAACU,OAAO,CAAC;YAAEhB,QAAQD,gBAAO,CAACC,MAAM,CAACK,OAAO,CAACN,gBAAO,CAACC,MAAM,CAACiB,KAAK,IAAIlB,gBAAO,CAACC,MAAM,CAACkB,QAAQ;QAAK;IAErI,EACA,OAAOtB,OAAO;QACZC,QAAQP,GAAG,CAAC,gDAAgDM;QAC5D,OAAO;IACT;IAED,OAAO;AAEV;AAUA,IAAMN,MAAM,SAACa;WAAY,AAACX,WAAW,OAAQA,OAAO2B,IAAI,CAAChB,WAASN,QAAQP,GAAG,CAACa"}